
--PAIR--
pair<int,int> p={1,3}
cout<<p.first<<p.second

pair<int,pair<int,int>> p={1,{1,3}}

pair<int,int> arr[]={{1,3},{1,2},{1,4}}
cout<<arr[1].second -->2


--VECTOR--
vectors are dynamic in size unlike the arrays

vector<int> v; --> this creates an empty container

v.push_back(1); --> this pushes 1 to the end of the vector
v.emplace_back(2); --> this also does the same thing as push but is faster as compared to push

vector<pair<int,int>> vec;
v.push_back({1,2});
v.emplace_back(1,2); --> difference is the change in syntax

vector<int> v1(5,100) --> creates a vector as {100,100,100,100,100}
vector<int> v1(5,20) --> creates a vector as {20,20,20,20,20}
    
vector<int> v2(v1) --> this creates a copy of v1 as v2


--ITERATOR--
points to the address where the element is stored

{12,15,6,7,8}

vector<int>::iterator it= v.begin() --> this points to the location where 12 is stored

it++ --> points to the location where 15 is stored

cout<< *(it) --> this prints the value as 15

vector<int>::iterator it= v.end() --> points to the location after the location where 8 is stored

vector<int>::iterator it=v.rend() --> points to location before the location of 12

vector<int>::iterator it=v.rbegin() --> points to the location of 8

**imp** 
we can write auto for any auto assignment of data type
[int a=5] instead of this we can also write [auto a=5]


for(vector<int>::iterator it= v.begin(); it!=v.end();it++){
    cout<<*(it);
} --> this prints the whole vector

another way of doing the same thing
for(auto it= v.begin(); it!=v.end();it++){
    cout<<*(it);
} 

--vector erase--

{12,15,6,7,8}

v.erase(v.begin()+1) --> this deletes 15 from the vector

v.erase(v.begin()+1,v.begin()+4) --> this deletes 15,6,7 from the vector [start,end)

--vector insert--

vector<int>v(2,100) --> this creates {100,100}

v.insert(v.begin(),300) --> this does {300,100,100}

v.insert(v.begin()+1,2,50) --> this does {300,50,50,100,100}
2 tells about the number of times it has to be repeated and 50 is the number which is repeated

cout<<v.size() --> gives us the no of elements 

v.pop_back() --> removes the last elements

v1.swap(v2) --> swaps the 2 vectors

v.clear() --> erases the entire vector 

**imp**
for a list a double linked list is maintained and for a vector a singly linked list is done so the insert operation of a vector is inefficient than the push front operation of the list

--LIST--

similar to vector it is dynamic

list<int> ls;

ls.push_back(2)
ls.emplace_back(4) --> adds an element to the end of the list

ls.push_front(2)
ls.emplace_front(4) --> adds an element to the front of the list

reverse() – reverse the list.
ls.reverse();

sort() – sorts the list in ascending order.
ls.sort();

size() – returns the number of elements on the list.
ls.size();

rest of the functions are same as vector
begin, end,rebegin,rend,clear,insert,size,swap;

--STACK--

LIFO
stack only has 3 functions -> push,pop,top
we cannot use the stack by indexing as st[1] etc

stack<int> st;
st.push(1);
st.push(2);
st.emplace(3); {1,2,3}

{1,2,3}

cout<<st.top() --> this gives 3
st.pop() --> {1,2}  POP FUNCTION DOES NOT RETURN A VALUE TOP FUNCTION DOES

st.size() --> gives 2

stack<int> st2;
st.swap(st2) --> both the stacks are swapped

**imp** 
begin() and end() returns the location whereas front() and back() returns the value

--QUEUE--
FIFO
queue<int>q;

same as stack

--PRIORITY QUEUE--

a tree like data structure is maintained inside of this
stores the numbers in decending order 
that mean pq.top will return the maximum number that is stored in the queue
the insertion opertion takes O(logn) time 

priority_queue<int>pq; --> also known as max heap
pq.push(5);
pq.push(8);
pq.emplace(1);

{8,5,1}

pq.top() --> 8

pq.pop() --> 8

for min heap or decending priority
priority_queue<int, vector<int>, greater<int>>pq;


--SET--
         
stores in sorted order and unique elements only

set<int>st;
st.insert(2);
st.insert(3);
auto it=st.find(3); --> find return the location at which the element is stored

**imp** 
if the element is not found it points to st.end()

auto it1=st.find(2);
auto it2=st.find(4);

st.erase(it1,it2) --> this will erase from 2 to less than 4 --> [start,end)

st.erase(5);

st.count --> returns either 0 or 1


--MULTISET--

same as set but allows duplicate elements

multiset<int> ms;

ms.insert(2);
ms.insert(4);
ms.insert(2);  {2,2,4}
ms.insert(2);

ms.erase(2) --> removes all the elements in the set

ms.count(2) --> 2

ms.erase(ms.find(2)) --> for deleting a single element

--UNORDER SET--

it does contain unique element but they are not in sorted manner
    
--MAP--

which stores a key and an element where each key is a unique value and the elements can be repeated

it stores the keys in a sorted order and unique keys

map<int,int> mpp;
mp.insert({1,10});
mp.emplace({2,20});
where the first element is the key and next is the element stored in that keys

mpp[1]=2 --> means that at the key 1 the element 2 is stored

--UNOREDERED MAP--
unordered_map<int,int> mpp;

--MULTI MAP--

--EXTRA--

sort(v.begin(),v.end()) --> sorts the elements in ascending order

for sorting a particular portion it works similar to [start,end)
sort(start,end)

sort(a ,a+n , greater<int>) --> for descending

for sorting according to the given question you can also create your own function 

question -->
sort it ascending according to second element 
and it it is same then sort the first according to descending order

pair<int, int> a[]={{1,2},{2,1},{4,1}}

bool comp(pair<int,int>p1, pair<int,int>p2){
    if(p1.second<p2.second) return true;
    if(p1.second>p2.second) return false;

    // for same condition
    if(p1.first>p2.first) return true;
    return false;
}

sort(a,a+n,comp)

for permutations

--for all the permutations start from the sorted manner--

string s="132"
sort(s.begin(),s.end());

do{
    cout<< s << endl;
}while(next_permutation(s.begin(),s.end()))

-- for max and min element --

int maxi=*max_element(a,a+n)
int mini=*min_element(a,a+n)

**imp**
resize in vector to remove the last n elements

count in vector to count the number of occurances in the array --> count(str.begin(), str.end(), 'e')

stoi converts strings to integer

for copying the entire vector to a set:- 
std::set<int> st(nums.begin(), nums.end());

to iterate through set elements we can use next()
next(st.begin(),3); --> 3 is the number of times it should iterate
it returns the iterator

to iterate through set elements we can use advance()
auto it=st.rbegin();
advance(it,2)  --> 2 is the number of times it should iterate
it does not return any value (void)

String find is used to find the first occurrence of a sub-string in the specified string being called upon. It returns the index of the first occurrence of the substring in the string from the given starting position
int found=string.find(substring);
if the substring is not found it returns string::npos as the value


reversing a vector and a string
reverse(vec.begin(),vec.end()) --> imp it does not return anything it reverses a string their itself and return void

to remove the end elements from the vector we use vec.pop_back() function

to append a string into another string we use str1.append(str2);

INT_MAX and INT_MIN for finding the max and min possible lengths of int type variable

isalpha(s[i]) and isspace(s[i]) and isdigit(s[i]) for alphabet and space checking in a string

for taking mod of numbers --> abs(number)

To look at the latest element in the vector --> vec.back()
